script "behavior_WordTile"
local sDragging,sMyHomes,sOneHome

On MouseDown
   # don't let user drag an image that was placed successfully
    put the uWordLocations of me into sMyHomes
   
   if the uInPlace of me <> "true" then
      set the layer of me to top
      --     grab me
      put true into sDragging
   end if
end MouseDown


on mouseMove x,y
   if not sDragging then exit mouseMove
   set the loc of me to minMax(the rect of this cd)
   glowtile me, word 1 of checkHomeProximity()
end mouseMove

function minMax pRect -- get a point within bounds
   local x, y
   if pRect = "" then
      put the rect of this card into pRect
   end if
   put max(item 1 of pRect,min(item 3 of pRect,the mouseh)) into x
   put max(item 2 of pRect,min(item 4 of pRect,the mousev)) into y
   return x,y
end minMax


on mouseUp
   local tWhatControl, tIsHome
   put me into tWhatControl
   -- outOfFrame
   put false into sDragging
   put checkHomeProximity() into tIsHome
   if word 1 of tIsHome = true then
      lockInPlace
   end if
   checkCompletion
end mouseUp

command lockInPlace
   local pWord
   # lock in place
   set the loc of me to sMyHomes[sOneHome]
   set the uInPlace  of me to "true" 
   set the showborder of me to "false"
   relayer me after grc "startHere"
   
   # delete coords
   put the cWord of me into pWord
   deleteOccupiedLocation  sOneHome, pWord
   
   --  runpixie  # deprecated for now... was in stack script... may resurrect in v2
   
   glowtile me, false
end lockInPlace

command clueGoHome
   local tLoc
   put the uWordLocations of me into sMyHomes
   setTileGlow "large" 
   relayer me to front of card "word-puzzle"
   glowtile me, true
   put sMyHomes[1] into tLoc
   # BM: handle an already placed word picked as a clue
   if tLoc is not empty then
      move me from (the loc of  me) to tLoc in 1500 milliseconds without messages
   else
      wait 500 milliseconds
   end if
   glowtile me, false
end clueGoHome


on mouseRelease
  put false into sDragging
end mouseRelease

## We need to disallow dragging outside the bounds
## of the card:

command outOfFrame
   local tBounds, tMyLoc, tStartLoc, tVaxis, tOutOfBoundsFlag, tHaxis
   
   put the rect of this card into tBounds
   put the loc of me into tMyLoc
   put tMyLoc into tStartLoc
   
   switch
      case  ( (item 2 of tMyLoc) > (item 4 of tBounds) )
         put  (item 4 of tBounds -20) into tVaxis
         put tVaxis into item 2 of tMyloc
         put 1 into tOutOfBoundsFlag
         break
      case (item 2 of tMyLoc <0) 
         put 30 into item 2 of tMyloc
         put 1 into tOutOfBoundsFlag
         break
      case ( (item 1 of tMyLoc) > (item 3 of tBounds) )
         put item 3 of tBounds-20 into tHaxis
         put tHaxis into item 1 of tMyLoc
         put 1 into tOutOfBoundsFlag
         break
      case (item 1 of tMyLoc <0) 
         put 30 into item 1 of tMyloc
         put 1 into tOutOfBoundsFlag
   end switch
   if  tOutOfBoundsFlag = 1 then
      set the loc of me to tMyLoc
      put 0 into tOutOfBoundsFlag
   end if
   
   # MONITOR:
   --put tStartLoc & cr & tMyLoc & cr & tBounds
   
end outOfFrame

function checkHomeProximity # Cause tile to snap to location if close
   local tLeftDistance, tTopDistance
   
   repeat for each key pLoc in sMyHomes
      put the abs of  (item 1 of the loc of me - item 1 of sMyHomes[pLoc]) into tLeftDistance
      put the abs of  (item 2 of the loc of me - item 2 of sMyHomes[pLoc]) into tTopDistance
      if (the abs of  (item 1 of the loc of me - item 1 of of sMyHomes[pLoc])  < 30) AND \
            (the abs of  (item 2 of the loc of me - item 2 of  of sMyHomes[pLoc]) <30) then
         put pLoc into sOneHome
         return true
         exit repeat
      end if
   end repeat
   
   return false  
end checkHomeProximity

